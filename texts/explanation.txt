


<h3>Evaluation Criteria</h3>
    <p>
        To effectively compare Linear Search and Binary Search, several key criteria are used to evaluate and understand how each algorithm operates and performs. These criteria help provide a structured comparison based on both theoretical understanding and practical application. Listed below are brief explanations of what each criterion focuses on: 
    </p>
        <ol>
            <li>
                <strong>How It Works:</strong>
                <p>This refers to the fundamental logic or principle that defines how the algorithm functions. It explains the general strategy used to search for a target value within a dataset, whether it's through sequential checking, division, or other techniques.</p>            
            </li>
            <li>
                <strong>Working Steps:</strong>
                <p>This involves a breakdown of the algorithm's execution process using a sample input. It includes each step performed during the search, such as comparisons, index movement, or recursive calls, providing a visual understanding of the algorithmâ€™s flow.</p>            
            </li>
            <li>
                <strong>Time Complexity:</strong>
                <p>Time complexity evaluates the efficiency of the algorithm in terms of the time it takes to run as the input size grows. It typically considers three scenarios</p>
                <ul>
                    <li><b>Best Case -</b> The minimum number of operations required</li>
                    <li><b>Average Case -</b> The expected number of operations for a typical input</li>
                    <li><b>Worst Case -</b> The maximum number of operations required</li>
                </ul> 
                <br>       
            </li>
            <li>
                <strong>Space Complexity:</strong>
                <p>This measures how much extra memory the algorithm needs to run, excluding the input data itself. It helps determine whether the algorithm is memory-efficient or requires additional storage for variables, recursive calls, or data structures.</p>            
            </li>
            <li>
                <strong>Pros And Cons:</strong>
                <p>This criterion outlines the strengths and weaknesses of each algorithm. It considers factors like simplicity, flexibility, performance, data requirements, and ease of implementation. Understanding the advantages and limitations helps decide when an algorithm is best suited for a given scenario.</p>            
            </li>
        </ol>